# Initial permut matrix for the datas
PI = [93, 86, 128, 124, 77, 117, 61, 3,
      69, 65, 87, 48, 41, 109, 27, 113,
      126, 24, 120, 66, 112, 40, 53, 9,
      122, 20, 99, 100,
      49, 121, 119, 11, 108, 84, 75, 15,
      17, 105, 39, 28, 110, 12, 25, 14,
      91, 89, 35, 115, 29, 94,
      95, 58, 98, 111, 104, 56, 21,
      83, 78, 63, 76, 54,
      102, 70, 80, 30, 96, 74, 68,
      71, 116, 114, 37, 85,
      90, 106, 60, 123, 101, 16, 45,
      59, 92, 67, 127, 44, 52, 82, 64,
      42, 57, 79, 72, 51, 31, 81, 107, 62,
      125, 118, 88, 32, 47, 73, 36, 46, 33,
      26, 43, 8, 22, 55, 13,
      103, 34, 23, 50, 18, 38, 97, 5, 2, 10, 4, 1, 6, 19, 7, ]


CP_1 = [
    10, 23, 116, 19, 14, 59, 52, 83, 74,
    32, 54, 98, 114, 118, 110, 36, 120,
    56, 94, 35, 26, 86, 20, 112, 117, 96, 119, 122, 126,
    17, 18, 55, 105, 34, 108, 124, 115,
    46, 44, 93, 50, 111, 92, 49, 103, 69,
    104, 80, 84, 33, 106, 39, 95, 90, 87,
    22, 100, 125, 4, 8, 66, 16, 88, 123, 128,
    53, 89, 101, 62, 107, 81, 63, 82, 77, 72,
    78, 91, 102, 75, 58, 65, 48, 121, 68, 6,
    11, 51, 85, 76, 57, 40, 71, 47, 70, 42,
    99, 64, 60, 31, 27, 41, 113, 97, 37, 2,
    61, 45, 43, 30, 15, 127, 25, 38, 29,
    109, 7, 24, 73, 79, 28, 12, 67, 9, 13, 21, 5, 3, 1,
]

CP_2 = [
    13, 96, 37, 70, 95, 77, 73, 85, 45,
    34, 49, 43, 86, 84, 19, 55, 92, 48,
    25, 56, 80, 58, 27, 36, 94, 81, 63,
    76, 9, 5, 1, 38, 69, 28, 39, 41, 64,
    67, 59, 60, 21, 23, 66, 53, 78, 89, 33,
    35, 57, 72, 79, 93, 54, 6, 7, 82, 46, 52,
    40, 74, 44, 88, 68, 90, 65, 8, 32, 75, 91,
    50, 62, 31, 30, 24, 47, 42, 71, 20, 22,
    87, 61, 16, 83, 12, 18, 15,
    3, 11, 29, 14, 17, 10, 51, 4, 26, 2,
]

E = [
    64, 1, 2, 3, 4, 5,
    4, 5, 6, 7, 8, 9,
    8, 9, 10, 11, 12, 13,
    12, 13, 14, 15, 16, 17,
    16, 17, 18, 19, 20, 21,
    20, 21, 22, 23, 24, 25,
    24, 25, 26, 27, 28, 29,
    28, 29, 30, 31, 32, 33,
    32, 33, 34, 35, 36, 37,
    36, 37, 38, 39, 30, 31,
    30, 31, 32, 33, 34, 35,
    34, 35, 36, 37, 38, 39,
    48, 49, 50, 51, 52, 53,
    52, 53, 54, 55, 56, 57,
    56, 57, 58, 59, 60, 61,
    60, 61, 62, 63, 64, 1
]

S_BOX_EN = [[[125, 66, 18, 88, 132, 38, 13, 204, 58, 39, 139, 128, 156, 68, 162, 28],
             [189, 235, 222, 148, 75, 253, 183, 254,
                 4, 47, 133, 94, 164, 87, 114, 86],
             [35, 207, 77, 157, 168, 171, 163, 41,
                 63, 11, 190, 221, 43, 64, 25, 137],
             [50, 145, 167, 232, 101, 109, 53, 146,
                 206, 131, 95, 225, 161, 227, 37, 116],
             [7, 195, 71, 16, 80, 165, 115, 141, 202,
                 54, 32, 56, 201, 218, 149, 138],
             [113, 22, 252, 23, 117, 172, 209, 178,
                 76, 255, 105, 120, 174, 122, 185, 83],
             [107, 233, 179, 84, 118, 98, 79, 215,
                 74, 192, 144, 160, 89, 45, 170, 247],
             [181, 250, 142, 97, 93, 176, 180, 82,
                 246, 147, 158, 193, 6, 15, 103, 26],
             [70, 249, 110, 237, 85, 52, 14, 49, 72,
                 123, 217, 239, 17, 91, 188, 177],
             [211, 124, 20, 216, 92, 236, 143, 210,
                 213, 69, 243, 127, 223, 248, 90, 111],
             [242, 130, 9, 108, 104, 44, 55, 229, 166,
                 196, 106, 173, 126, 208, 81, 42],
             [226, 99, 121, 186, 200, 96, 150, 245,
                 238, 152, 112, 61, 134, 140, 19, 228],
             [36, 5, 199, 155, 197, 24, 102, 205, 31,
                 129, 34, 100, 198, 240, 175, 136],
             [119, 151, 219, 244, 194, 67, 184, 234,
                 203, 182, 231, 251, 154, 214, 12, 1],
             [187, 29, 33, 8, 27, 59, 51, 3, 230, 169, 60, 21, 10, 30, 153, 65],
             [62, 241, 135, 57, 159, 46, 191, 40, 73, 212, 220, 2, 224, 48, 78, 0],
             ],
            [[186, 67, 56, 171, 87, 86, 12, 242, 122, 85, 204, 210, 196, 152, 55, 83],
             [14, 250, 160, 53, 142, 182, 181, 236,
                 16, 50, 41, 187, 101, 25, 146, 118],
             [105, 158, 128, 92, 176, 135, 164, 109,
                 151, 38, 163, 111, 30, 106, 59, 58],
             [126, 159, 218, 183, 197, 24, 147, 132,
                 154, 29, 133, 65, 177, 91, 6, 179],
             [15, 194, 155, 34, 116, 203, 120, 74,
                 191, 119, 23, 96, 248, 233, 61, 165],
             [192, 60, 150, 40, 26, 97, 18, 169, 157,
                 241, 72, 145, 215, 107, 220, 27],
             [93, 189, 121, 98, 202, 123, 144, 110,
                 84, 188, 232, 17, 129, 9, 214, 124],
             [166, 201, 62, 102, 117, 190, 205, 90,
                 75, 170, 35, 246, 19, 28, 45, 63],
             [33, 255, 48, 240, 82, 37, 36, 54, 130,
                 211, 247, 224, 49, 115, 225, 52],
             [184, 88, 7, 51, 5, 253, 199, 239, 103,
                 161, 46, 217, 153, 231, 140, 43],
             [80, 143, 11, 207, 185, 81, 127, 208,
                 180, 136, 198, 95, 73, 69, 68, 20],
             [162, 113, 31, 149, 200, 173, 193, 178,
                 213, 234, 89, 100, 112, 174, 44, 243],
             [76, 13, 222, 125, 168, 39, 114, 237, 64,
                 167, 99, 141, 230, 252, 227, 172],
             [108, 104, 212, 249, 221, 66, 138, 226,
                 209, 206, 229, 238, 175, 251, 8, 2],
             [235, 10, 32, 21, 78, 3, 70, 1, 216, 244, 79, 42, 22, 47, 195, 0],
             [186, 67, 56, 171, 87, 86, 12, 242, 122, 85, 204, 210, 196, 152, 55, 83]],
            [[1, 53, 13, 118, 186, 249, 226, 48, 43, 63, 22, 153, 182, 161, 80, 179],
             [7, 17, 162, 46, 77, 200, 92, 24, 76,
                 29, 121, 109, 131, 236, 209, 151],
             [234, 218, 175, 67, 133, 165, 62, 31,
                 195, 8, 93, 59, 184, 86, 127, 240],
             [9, 88, 10, 216, 98, 243, 83, 26, 155,
                 50, 70, 130, 213, 188, 189, 203],
             [2, 225, 232, 248, 25, 65, 123, 108, 115,
                 244, 219, 107, 137, 78, 241, 143],
             [32, 207, 233, 12, 167, 204, 119, 112,
                 237, 177, 66, 56, 89, 30, 132, 235],
             [152, 52, 247, 223, 224, 251, 117, 231,
                 101, 239, 54, 85, 185, 159, 227, 58],
             [238, 202, 124, 64, 94, 21, 33, 190,
                 158, 164, 23, 149, 208, 100, 41, 82],
             [122, 199, 180, 214, 5, 103, 212, 75,
                 68, 87, 84, 126, 228, 141, 37, 176],
             [61, 36, 96, 99, 125, 16, 136, 140, 135,
                 19, 11, 181, 97, 128, 138, 139],
             [47, 20, 217, 42, 129, 3, 250, 168, 90,
                 221, 173, 242, 148, 150, 157, 254],
             [51, 15, 18, 57, 91, 14, 27, 145, 102,
                 71, 105, 111, 95, 206, 245, 198],
             [60, 81, 255, 72, 183, 166, 134, 116, 222,
                 220, 252, 104, 197, 35, 154, 193],
             [4, 120, 40, 196, 110, 49, 39, 246, 191,
                 171, 45, 106, 201, 187, 113, 192],
             [253, 69, 163, 205, 170, 44, 79, 160,
                 210, 55, 178, 142, 194, 74, 229, 174],
             [114, 34, 38, 73, 6, 28, 156, 147, 211,
                 169, 144, 146, 230, 215, 172, 0],
             ], [[205, 75, 124, 210, 70, 146, 46, 238, 165, 140, 225, 236, 198, 196, 34, 160],
                 [7, 245, 120, 31, 175, 142, 166, 208,
                     58, 56, 2, 231, 74, 72, 144, 128],
                 [35, 116, 153, 62, 161, 102, 151, 176,
                  202, 87, 133, 67, 26, 134, 106, 36],
                 [184, 152, 222, 149, 237, 66, 206, 107,
                  113, 13, 139, 33, 170, 51, 6, 200],
                 [45, 103, 96, 84, 131, 203, 109, 50, 172,
                     145, 21, 129, 250, 214, 48, 163],
                 [226, 122, 211, 61, 17, 65, 8, 147, 138,
                     218, 57, 137, 213, 90, 216, 14],
                 [85, 154, 132, 169, 180, 188, 168, 173,
                  91, 79, 246, 20, 143, 12, 227, 71],
                 [159, 167, 39, 100, 121, 181, 195, 97,
                     37, 164, 16, 248, 47, 49, 28, 114],
                 [23, 255, 32, 228, 82, 30, 80, 60, 158,
                     239, 242, 194, 93, 117, 224, 29],
                 [157, 69, 3, 25, 11, 252, 209, 234, 59,
                     220, 19, 240, 104, 201, 156, 22],
                 [42, 130, 24, 243, 221, 118, 126, 182,
                     177, 94, 235, 27, 54, 38, 63, 53],
                 [119, 112, 18, 111, 183, 207, 197, 136,
                  185, 244, 78, 127, 92, 179, 83, 232],
                 [125, 40, 162, 99, 135, 55, 110, 233, 105,
                  174, 155, 148, 223, 249, 230, 178],
                 [95, 77, 189, 241, 212, 68, 101, 123,
                     190, 199, 204, 215, 171, 253, 1, 15],
                 [76, 5, 41, 44, 150, 4, 89, 9, 187, 251, 98, 73, 43, 64, 219, 0],
                 [191, 254, 247, 186, 229, 141, 217, 115,
                  52, 86, 88, 10, 108, 192, 193, 81]
                 ], [[1, 58, 8, 154, 191, 79, 67, 43, 129, 42, 38, 223, 226, 226, 178, 151],
                     [2, 37, 105, 109, 112, 101, 49, 51, 47,
                      119, 64, 134, 156, 156, 118, 189],
                     [252, 240, 235, 90, 209, 89, 13, 184,
                      33, 113, 44, 145, 98, 98, 181, 146],
                     [7, 84, 25, 249, 177, 121, 54, 61, 114,
                      30, 175, 244, 148, 148, 231, 167],
                     [5, 107, 52, 250, 22, 215, 24, 192, 187,
                      214, 194, 206, 142, 142, 246, 104],
                     [28, 75, 144, 21, 230, 196, 164, 218,
                      139, 68, 140, 116, 57, 57, 133, 245],
                     [19, 110, 241, 123, 85, 149, 253, 137,
                      205, 97, 122, 198, 161, 161, 236, 141],
                     [34, 39, 99, 82, 31, 88, 128, 211,
                         179, 77, 169, 76, 94, 94, 87, 159],
                     [32, 219, 233, 238, 16, 71, 131, 29, 111,
                      56, 138, 186, 190, 190, 102, 127],
                     [59, 14, 147, 126, 27, 153, 225, 73, 41,
                         40, 74, 125, 158, 158, 199, 210],
                     [124, 10, 220, 15, 96, 227, 208, 150, 195,
                      48, 234, 229, 232, 232, 213, 176],
                     [3, 26, 9, 93, 100, 66, 204, 132, 135,
                         160, 172, 117, 247, 247, 254, 237],
                     [4, 115, 163, 23, 91, 193, 80, 152, 173,
                         168, 63, 171, 86, 86, 217, 182],
                     [6, 174, 11, 78, 166, 55, 188, 162, 242,
                         36, 202, 216, 228, 228, 180, 170],
                     [255, 70, 65, 20, 62, 143, 222, 251, 72,
                         243, 212, 224, 83, 83, 106, 203],
                     [157, 18, 35, 60, 17, 130, 165, 185,
                         197, 155, 207, 108, 248, 248, 200, 0]
                     ], [[234, 44, 195, 243, 117, 185, 72, 132, 217, 219, 253, 255, 173, 116, 48, 171],
                         [12, 247, 99, 93, 165, 169, 157, 155,
                          65, 21, 5, 179, 90, 138, 220, 15],
                         [101, 50, 39, 102, 164, 110, 208, 237,
                          100, 142, 55, 8, 29, 228, 198, 13],
                         [11, 226, 212, 216, 236, 135, 60, 207,
                          136, 36, 118, 64, 224, 32, 4, 34],
                         [49, 148, 112, 159, 205, 128, 197, 94,
                          244, 233, 53, 145, 231, 202, 89, 181],
                         [235, 111, 131, 104, 46, 54, 23, 170,
                          124, 74, 106, 210, 245, 87, 203, 26],
                         [184, 206, 59, 150, 18, 96, 240, 227,
                          187, 107, 156, 2, 211, 35, 51, 91],
                         [241, 125, 10, 166, 204, 57, 186, 144,
                          31, 242, 37, 143, 129, 73, 82, 14],
                         [68, 121, 25, 189, 182, 30, 174, 41, 127,
                             223, 199, 209, 75, 123, 214, 71],
                         [88, 146, 7, 47, 24, 180, 248, 218,
                             134, 77, 38, 192, 6, 70, 239, 40],
                         [20, 194, 43, 193, 45, 140, 188, 201,
                             66, 183, 250, 81, 105, 97, 98, 16],
                         [163, 108, 52, 122, 172, 221, 126, 80,
                          225, 114, 86, 196, 147, 120, 27, 249],
                         [113, 69, 119, 22, 167, 84, 154, 76, 92,
                          246, 177, 213, 229, 230, 168, 215],
                         [176, 85, 33, 238, 175, 103, 200, 63,
                             151, 109, 137, 190, 160, 251, 1, 42],
                         [139, 9, 83, 61, 158, 3, 130, 19, 178,
                             162, 17, 133, 115, 153, 232, 0],
                         [141, 58, 254, 222, 252, 56, 67, 95,
                             78, 152, 79, 28, 62, 191, 161, 149]
                         ], [[1, 8, 27, 32, 214, 112, 74, 125, 52, 71, 99, 81, 249, 243, 231, 191],
                             [2, 36, 30, 113, 95, 118, 86, 53, 102,
                              82, 108, 147, 163, 187, 150, 173],
                             [194, 48, 140, 122, 202, 217, 128, 44,
                              177, 59, 211, 104, 114, 183, 222, 219],
                             [6, 60, 57, 197, 46, 75, 186, 121, 119,
                              87, 80, 139, 254, 218, 161, 239],
                             [9, 67, 73, 33, 40, 157, 233, 41, 228,
                              111, 155, 154, 105, 142, 240, 198],
                             [11, 110, 92, 39, 79, 251, 47, 229, 93,
                              131, 120, 174, 148, 130, 195, 184],
                             [13, 145, 116, 50, 22, 26, 63, 244, 227,
                              212, 156, 158, 127, 234, 170, 179],
                             [16, 7, 171, 91, 24, 69, 70, 90, 245,
                              101, 132, 188, 149, 182, 146, 220],
                             [64, 61, 210, 31, 38, 89, 78, 54, 68,
                                 117, 135, 141, 133, 153, 166, 215],
                             [85, 10, 14, 51, 58, 29, 175, 159, 88,
                                 84, 115, 165, 199, 180, 196, 213],
                             [126, 20, 235, 34, 136, 37, 97, 205, 100,
                              164, 109, 223, 143, 137, 250, 242],
                             [3, 21, 15, 42, 185, 45, 107, 72, 151,
                                 208, 190, 230, 167, 129, 237, 246],
                             [4, 43, 18, 62, 23, 248, 232, 181, 172,
                                 201, 209, 98, 206, 162, 207, 238],
                             [5, 19, 28, 96, 192, 55, 66, 224, 176,
                                 255, 103, 168, 169, 193, 221, 241],
                             [77, 138, 144, 35, 25, 94, 49, 252, 204,
                                 76, 253, 200, 203, 178, 189, 247],
                             [152, 12, 17, 106, 56, 65, 83, 124, 216,
                                 134, 160, 225, 123, 226, 236, 0]
                             ], [[243, 112, 217, 251, 176, 169, 94, 4, 181, 250, 65, 234, 223, 25, 33, 195],
                                 [26, 146, 95, 41, 131, 233, 183, 136,
                                  104, 60, 3, 206, 81, 229, 83, 54],
                                 [125, 121, 99, 46, 158, 113, 211, 17,
                                  155, 87, 51, 14, 84, 177, 212, 6, ],
                                 [36, 236, 148, 235, 88, 123, 58, 64,
                                     12, 106, 48, 24, 74, 40, 13, 63],
                                 [120, 96, 188, 194, 210, 108, 124, 42,
                                  247, 213, 61, 208, 149, 196, 45, 224],
                                 [47, 167, 150, 93, 72, 80, 10, 204,
                                     128, 62, 86, 164, 127, 35, 244, 16],
                                 [240, 159, 130, 29, 55, 98, 245, 242,
                                  221, 157, 205, 2, 230, 111, 129, 187],
                                 [254, 8, 23, 184, 215, 20, 185, 168,
                                  66, 191, 90, 70, 214, 132, 34, 32],
                                 [85, 139, 50, 239, 246, 75, 209, 118, 172,
                                  225, 102, 182, 114, 207, 170, 153],
                                 [7, 203, 22, 57, 15, 137, 226, 30, 147,
                                     156, 68, 138, 21, 37, 249, 71],
                                 [44, 166, 11, 248, 103, 198, 134, 186,
                                  91, 190, 255, 100, 140, 192, 171, 9],
                                 [197, 145, 73, 216, 180, 222, 160, 77,
                                  200, 152, 101, 238, 28, 199, 78, 232],
                                 [107, 135, 27, 39, 38, 122, 219, 165, 162,
                                  218, 174, 252, 220, 161, 228, 179],
                                 [141, 178, 79, 59, 241, 201, 126, 144,
                                     53, 163, 82, 193, 110, 227, 1, 19],
                                 [189, 18, 69, 143, 173, 5, 116, 67,
                                     105, 237, 49, 133, 175, 154, 31, 0],
                                 [119, 89, 253, 231, 202, 115, 151, 52,
                                     97, 142, 92, 56, 76, 117, 43, 109]
                                 ]
            ]

# SBOX
S_BOX = [

    [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
     [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
        [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
        [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13],
     ],

    [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
     [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
        [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
        [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9],
     ],

    [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
     [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
        [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
        [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12],
     ],

    [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
     [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
        [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
        [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14],
     ],

    [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
     [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
        [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
        [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3],
     ],

    [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
     [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
        [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
        [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13],
     ],

    [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
     [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
        [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
        [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12],
     ],

    [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
     [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
        [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
        [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11],
     ]
]

# Permut made after each SBox substitution for each round
P = [50, 34, 52, 28, 58, 43, 8, 4,
     63, 3, 16, 61, 22, 40, 38, 56, 49, 6, 51, 59, 14, 5, 48, 12, 18, 62, 57, 20, 42, 13, 47, 25, 46, 21, 53, 60, 36, 54, 39, 35, 10, 17, 44, 33, 32, 64, 27, 30, 2, 31, 23, 9, 24, 55, 29, 7, 37, 26, 19, 11, 41, 1, 15, 45, ]

# Final permut for datas after the 16 rounds
PI_1 = [125, 122, 8, 124, 121, 126, 128,
        110, 24, 123, 32, 42, 113, 44, 36, 80, 37,
        118, 127, 26, 57, 111, 116, 18, 43, 108, 15,
        40, 49, 66, 95, 102, 107, 115, 47, 105, 73,
        119, 39, 22, 13, 90, 109, 86, 81, 106, 103,
        12, 29, 117, 94, 87, 23, 62, 112, 56, 91, 52,
        82, 77, 7, 98, 60, 89, 10, 20, 84, 69, 9, 64,
        70, 93, 104, 68, 35, 61, 5, 59, 92, 65, 96, 88,
        58, 34, 74, 2, 11, 101, 46, 75, 45, 83, 1, 50,
        51, 67, 120, 53, 27, 28, 79, 63, 114, 55, 38,
        76, 97, 33, 14, 41, 54, 21, 16, 72, 48, 71,
        6, 100, 31, 19, 30, 25, 78, 4, 99, 17, 85, 3]

# Matrix that determine the shift for each round of keys
SHIFT = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]


def string_to_bit_array(text):  # Convert a string into a list of bits
    array = list()
    for char in text:
        binval = binvalue(char, 8)  # Get the char value on one byte
        # Add the bits to the final list
        array.extend([int(x) for x in list(binval)])
    return array


def bit_array_to_string(array):  # Recreate the string from the bit array
    res = ''.join([chr(int(y, 2)) for y in [''.join([str(x)
                                                     for x in _bytes]) for _bytes in nsplit(array, 8)]])
    return res


def binvalue(val, bitsize):  # Return the binary value as a string of the given size
    binval = bin(val)[2:] if isinstance(val, int) else bin(ord(val))[2:]
    if len(binval) > bitsize:
        raise "binary value larger than the expected size"
    while len(binval) < bitsize:
        binval = "0"+binval  # Add as many 0 as needed to get the wanted size
    return binval


def nsplit(s, n):  # Split a list into sublists of size "n"
    return [s[k:k+n] for k in range(0, len(s), n)]


ENCRYPT = 1
DECRYPT = 0


class des():
    def __init__(self):
        self.password = None
        self.text = None
        self.keys = list()

    def run(self, key, text, action=ENCRYPT, padding=False):
        if len(key) < 16:
            raise "Key Should be 16 bytes long"
        elif len(key) > 16:
            # If key size is above 8bytes, cut to be 8bytes long
            key = key[:16]

        self.password = key
        self.text = text

        if padding and action == ENCRYPT:
            self.addPadding()
        # If not padding specified data size must be multiple of 8 bytes
        elif len(self.text) % 16 != 0:
            raise "Data size should be multiple of 16"

        self.generatekeys()  # Generate all the keys
        # Split the text in blocks of 8 bytes so 64 bits
        text_blocks = nsplit(self.text, 16)
        result = list()
        for block in text_blocks:  # Loop over all the blocks of data
            # Convert the block in bit array
            block = string_to_bit_array(block)
            # LICK #Apply the initial permutation
            block = self.permut(block, PI)
            g, d = nsplit(block, 64)  # g(LEFT), d(RIGHT)
            # g, d = nsplit(block, 64) #g(LEFT), d(RIGHT)

            tmp = None
            for i in range(16):  # Do the 16 rounds
                d_e = self.expand(d, E)  # Expand d to match Ki size (48bits)

                if action == ENCRYPT:
                    tmp = self.xor(self.keys[i], d_e)  # If encrypt use Ki
                else:
                    # If decrypt start by the last key
                    tmp = self.xor(self.keys[len(self.keys)-1-i], d_e)

                tmp = self.substitute(tmp)  # Method that will apply the SBOXes
                tmp = self.permut(tmp, P)  # LICK
                tmp = self.xor(g, tmp)
                g = d
                d = tmp
            # LICK #Do the last permut and append the result to result
            result += self.permut(d+g, PI_1)
        final_res = bit_array_to_string(result)
        if padding and action == DECRYPT:
            # Remove the padding if decrypt and padding is true
            return self.removePadding(final_res)
        else:
            return final_res  # Return the final string of data ciphered/deciphered

    def substitute(self, d_e):  # Substitute bytes using SBOX
        subblocks = nsplit(d_e, 12)  # Split bit array into sublist of 6 bits
        result = list()

        for i in range(len(subblocks)):  # For all the sublists

            block = subblocks[i]
            row1 = ''.join([str(x) for x in block[2:6]])
            row2 = ''.join([str(x) for x in block[6:10]])
            col1 = ''.join([str(x) for x in block[0:2]]) + \
                ''.join([str(x) for x in block[10:12]])
            col2 = ''.join([str(x) for x in block[10:12]]) + \
                ''.join([str(x) for x in block[0:2]])

            row1 = int(row1, 2)  # Get the row with the first and last bit
            col1 = int(col1, 2)  # Column is the 2,3,4,5th bits

            # Take the value in the SBOX appropriated for the round (i)
            val = S_BOX_EN[i][row1][col1]
            bin1 = binvalue(val, 8)  # Convert the value to binary

            row2 = int(row2, 2)  # Get the row with the first and last bit
            col2 = int(col2, 2)  # Column is the 2,3,4,5th bits

            # Take the value in the SBOX appropriated for the round (i)
            val = S_BOX_EN[i][row2][col2]
            bin2 = binvalue(val, 8)  # Convert the value to binary

            bin = self.xor([int(x) for x in bin1], [int(x) for x in bin2])
            # And append it to the resulting list
            result += [int(x) for x in bin]
        return result

    def permut(self, block, table):  # Permut the given block using the given table (so generic method)
        return [block[x-1] for x in table]

    # Do the exact same thing than permut but for more clarity has been renamed
    def expand(self, block, table):
        return [block[x-1] for x in table]

    def xor(self, t1, t2):  # Apply a xor and return the resulting list
        return [x ^ y for x, y in zip(t1, t2)]

    def generatekeys(self):  # Algorithm that generates all the keys
        self.keys = []
        key = string_to_bit_array(self.password)

        key = self.permut(key, CP_1)  # Apply the initial permut on the key
        g, d = nsplit(key, len(key)/2)  # Split it in to (g->LEFT),(d->RIGHT)
        for i in range(16):  # Apply the 16 rounds
            # Apply the shift associated with the round (not always 1)
            g, d = self.shift(g, d, SHIFT[i])
            tmp = g + d  # Merge them
            # Apply the permut to get the Ki
            self.keys.append(self.permut(tmp, CP_2))

    def shift(self, g, d, n):  # Shift a list of the given value
        return g[n:] + g[:n], d[n:] + d[:n]

    def addPadding(self):  # Add padding to the datas using PKCS5 spec.
        pad_len = 8 - (len(self.text) % 8)
        self.text += pad_len * chr(pad_len)

    # Remove the padding of the plain text (it assume there is padding)
    def removePadding(self, data):
        pad_len = ord(data[-1])
        return data[:-pad_len]

    def encrypt(self, key, text, padding=False):
        return self.run(key, text, ENCRYPT, padding)

    def decrypt(self, key, text, padding=False):
        return self.run(key, text, DECRYPT, padding)


if __name__ == '__main__':
    key = "secret_kbrodhave"
    file = open("sample.txt", "r")
    text = ""
    for line in file:
        text += line
    file.close()
    count = 0
    while len(text) % 16 != 0:
        text += ' '
        count += 1
    d = des()
    r = d.encrypt(key, text)
    r2 = d.decrypt(key, r)
    output = open("output.txt", "w")
    for i in r:
        output.write(i)
    output.close()
    print("Deciphered: %r" % r2[0:-count])
